<script>
  document.addEventListener('DOMContentLoaded', function() {
    let cart = [];
    let selectedPaymentMethod = 'cash';
    let selectedMemberId = null;
    let tempProductId = null;
    let tempQuantity = 1;
    
    // Category filtering
    document.querySelectorAll('.category-btn').forEach(button => {
      button.addEventListener('click', function() {
        const category = this.getAttribute('data-category');
        
        // Remove active class from all category buttons
        document.querySelectorAll('.category-btn').forEach(btn => {
          btn.classList.remove('active');
        });
        
        // Add active class to clicked button
        this.classList.add('active');
        
        // Filter products
        const productItems = document.querySelectorAll('.product-item');
        productItems.forEach(item => {
          if (category === 'all' || item.getAttribute('data-category') === category) {
            item.style.display = '';
          } else {
            item.style.display = 'none';
          }
        });
      });
    });
    
    // Product search functionality
    document.getElementById('product-search').addEventListener('input', function() {
      const searchTerm = this.value.toLowerCase();
      const productItems = document.querySelectorAll('.product-item');
      
      productItems.forEach(item => {
        const productCard = item.querySelector('.product-card');
        const productName = productCard.getAttribute('data-name').toLowerCase();
        
        if (productName.includes(searchTerm)) {
          item.style.display = '';
        } else {
          item.style.display = 'none';
        }
      });
    });
    
    // Product selection
    document.querySelectorAll('.product-card').forEach(card => {
      card.addEventListener('click', function() {
        const productId = this.getAttribute('data-id');
        const productName = this.getAttribute('data-name');
        const productPrice = parseFloat(this.getAttribute('data-price'));
        const productStock = parseInt(this.getAttribute('data-stock'));
        
        // Store temp data for modal
        tempProductId = productId;
        
        // Show quantity modal with product info
        document.getElementById('quantity-product-name').textContent = productName;
        document.getElementById('quantity-stock').textContent = productStock;
        document.getElementById('quantity-input').value = 1;
        document.getElementById('quantity-input').max = productStock;
        
        // Show the modal
        const quantityModal = new bootstrap.Modal(document.getElementById('quantityModal'));
        quantityModal.show();
      });
    });
    
    // Quantity controls
    document.getElementById('decrease-qty').addEventListener('click', function() {
      const input = document.getElementById('quantity-input');
      const currentValue = parseInt(input.value);
      if (currentValue > 1) {
        input.value = currentValue - 1;
      }
    });
    
    document.getElementById('increase-qty').addEventListener('click', function() {
      const input = document.getElementById('quantity-input');
      const currentValue = parseInt(input.value);
      const maxValue = parseInt(input.max);
      if (currentValue < maxValue) {
        input.value = currentValue + 1;
      }
    });
    
    // Confirm quantity
    document.getElementById('confirm-quantity').addEventListener('click', function() {
      const quantity = parseInt(document.getElementById('quantity-input').value);
      const productCard = document.querySelector(`.product-card[data-id="${tempProductId}"]`);
      
      if (productCard) {
        const productId = productCard.getAttribute('data-id');
        const productName = productCard.getAttribute('data-name');
        const productPrice = parseFloat(productCard.getAttribute('data-price'));
        const productStock = parseInt(productCard.getAttribute('data-stock'));
        
        // Check if the product is already in cart
        const existingItemIndex = cart.findIndex(item => item.id === productId);
        
        if (existingItemIndex !== -1) {
          // Update quantity if already in cart
          const newQuantity = cart[existingItemIndex].quantity + quantity;
          
          if (newQuantity <= productStock) {
            cart[existingItemIndex].quantity = newQuantity;
          } else {
            alert(`Cannot add more than available stock (${productStock})`);
            return;
          }
        } else {
          // Add new item to cart
          cart.push({
            id: productId,
            name: productName,
            price: productPrice,
            quantity: quantity,
            maxStock: productStock
          });
        }
        
        // Update cart UI
        updateCartUI();
        
        // Close the modal
        bootstrap.Modal.getInstance(document.getElementById('quantityModal')).hide();
      }
    });
    
    // Clear cart
    document.getElementById('clear-cart').addEventListener('click', function() {
      if (confirm('Are you sure you want to clear the cart?')) {
        cart = [];
        updateCartUI();
      }
    });
    
    // Payment method selection
    document.querySelectorAll('.payment-method-btn').forEach(button => {
      button.addEventListener('click', function() {
        // Remove active class from all payment method buttons
        document.querySelectorAll('.payment-method-btn').forEach(btn => {
          btn.classList.remove('active');
        });
        
        // Add active class to clicked button
        this.classList.add('active');
        
        // Store selected payment method
        selectedPaymentMethod = this.getAttribute('data-method');
        
        // Show/hide payment reference field for non-cash methods
        const referenceContainer = document.getElementById('payment-reference-container');
        if (selectedPaymentMethod !== 'cash') {
          referenceContainer.style.display = 'block';
        } else {
          referenceContainer.style.display = 'none';
        }
      });
    });
    
    // Apply discount
    document.getElementById('apply-discount').addEventListener('click', function() {
      updateTotals();
    });
    
    // Complete transaction
    document.getElementById('complete-transaction').addEventListener('click', function() {
      if (cart.length === 0) {
        alert('Cannot complete transaction with empty cart.');
        return;
      }
      
      // Gather transaction data
      const customerName = document.getElementById('customer-name').value;
      const customerPhone = document.getElementById('customer-phone').value;
      const note = document.getElementById('transaction-note').value;
      const discount = parseFloat(document.getElementById('discount-amount').value) || 0;
      const subtotal = calculateSubtotal();
      const tax = subtotal * 0.1; // 10% tax
      const total = subtotal + tax - discount;
      let paymentReference = null;
      
      if (selectedPaymentMethod !== 'cash') {
        paymentReference = document.getElementById('payment-reference').value;
        if (!paymentReference) {
          alert('Please enter payment reference for ' + selectedPaymentMethod);
          return;
        }
      }
      
      // Prepare transaction data to send to server
      const transactionData = {
        items: cart.map(item => ({
          productId: item.id,
          quantity: item.quantity,
          price: item.price
        })),
        customerId: selectedMemberId,
        customerName,
        customerPhone,
        paymentMethod: selectedPaymentMethod,
        paymentReference,
        subtotal,
        tax,
        discount,
        total,
        note
      };
      
      // Example of sending to server - replace with your actual endpoint
      fetch('/api/transactions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(transactionData)
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        return response.json();
      })
      .then(data => {
        alert('Transaction completed successfully!');
        // Reset cart and form
        cart = [];
        updateCartUI();
        document.getElementById('customer-name').value = '';
        document.getElementById('customer-phone').value = '';
        document.getElementById('transaction-note').value = '';
        document.getElementById('discount-amount').value = '';
        document.getElementById('selected-member').textContent = 'No member selected';
        selectedMemberId = null;
      })
      .catch(error => {
        console.error('Error completing transaction:', error);
        alert('Error completing transaction. Please try again.');
      });
    });
    
    // Search members
    document.getElementById('search-member-btn').addEventListener('click', function() {
      const searchValue = document.getElementById('member-search').value;
      
      if (!searchValue) {
        alert('Please enter search term');
        return;
      }
      
      // Fetch members from server
      fetch(`/api/members/search?q=${encodeURIComponent(searchValue)}`)
        .then(response => response.json())
        .then(data => {
          const resultsContainer = document.getElementById('member-search-results');
          resultsContainer.innerHTML = '';
          
          if (data.length === 0) {
            resultsContainer.innerHTML = '<div class="list-group-item">No members found</div>';
            return;
          }
          
          data.forEach(member => {
            const item = document.createElement('button');
            item.className = 'list-group-item list-group-item-action';
            item.innerHTML = `
              <div class="d-flex justify-content-between align-items-center">
                <div>
                  <h6 class="mb-0">${member.name}</h6>
                  <p class="text-sm text-muted mb-0">${member.email || ''}</p>
                </div>
                <div class="text-sm text-muted">${member.phone || ''}</div>
              </div>
            `;
            
            item.addEventListener('click', function() {
              selectedMemberId = member.id;
              document.getElementById('selected-member').textContent = member.name;
              document.getElementById('customer-name').value = member.name;
              document.getElementById('customer-phone').value = member.phone || '';
              
              bootstrap.Modal.getInstance(document.getElementById('memberModal')).hide();
            });
            
            resultsContainer.appendChild(item);
          });
        })
        .catch(error => {
          console.error('Error searching members:', error);
          alert('Error searching for members. Please try again.');
        });
    });
    
    // Update Cart UI
    function updateCartUI() {
      const cartContainer = document.getElementById('cart-items');
      
      if (cart.length === 0) {
        cartContainer.innerHTML = `
          <div class="text-center py-5 text-muted">
            <i class="fas fa-shopping-cart fa-3x mb-3"></i>
            <p>Cart is empty</p>
            <p class="text-sm">Add products by clicking on items from the left panel</p>
          </div>
        `;
      } else {
        let cartHTML = '';
        
        cart.forEach((item, index) => {
          const itemTotal = item.price * item.quantity;
          
          cartHTML += `
            <div class="cart-item p-3 border-bottom">
              <div class="d-flex justify-content-between mb-2">
                <div>
                  <h6 class="mb-0">${item.name}</h6>
                  <div class="d-flex align-items-center">
                    <span class="text-sm text-muted">$${item.price.toFixed(2)} × ${item.quantity}</span>
                  </div>
                </div>
                <div class="text-end">
                  <span class="font-weight-bold">$${itemTotal.toFixed(2)}</span>
                  <div class="d-flex gap-1 mt-1">
                    <button class="btn btn-sm btn-outline-primary edit-qty-btn" data-index="${index}">
                      <i class="fas fa-edit"></i>
                    </button>
                    <button class="btn btn-sm btn-outline-danger remove-item-btn" data-index="${index}">
                      <i class="fas fa-trash"></i>
                    </button>
                  </div>
                </div>
              </div>
            </div>
          `;
        });
        
        cartContainer.innerHTML = cartHTML;
        
        // Add event listeners for cart actions
        document.querySelectorAll('.edit-qty-btn').forEach(button => {
          button.addEventListener('click', function() {
            const index = parseInt(this.getAttribute('data-index'));
            const item = cart[index];
            
            if (item) {
              tempProductId = item.id;
              document.getElementById('quantity-product-name').textContent = item.name;
              document.getElementById('quantity-stock').textContent = item.maxStock;
              document.getElementById('quantity-input').value = item.quantity;
              document.getElementById('quantity-input').max = item.maxStock;
              
              // When confirming quantity, remove old item and add updated one
              const originalConfirmHandler = document.getElementById('confirm-quantity').onclick;
              document.getElementById('confirm-quantity').onclick = function() {
                const newQuantity = parseInt(document.getElementById('quantity-input').value);
                cart[index].quantity = newQuantity;
                updateCartUI();
                bootstrap.Modal.getInstance(document.getElementById('quantityModal')).hide();
                document.getElementById('confirm-quantity').onclick = originalConfirmHandler;
              };
              
              const quantityModal = new bootstrap.Modal(document.getElementById('quantityModal'));
              quantityModal.show();
            }
          });
        });
        
        document.querySelectorAll('.remove-item-btn').forEach(button => {
          button.addEventListener('click', function() {
            const index = parseInt(this.getAttribute('data-index'));
            cart.splice(index, 1);
            updateCartUI();
          });
        });
      }
      
      updateTotals();
    }
    
    // Calculate subtotal
    function calculateSubtotal() {
      return cart.reduce((total, item) => total + (item.price * item.quantity), 0);
    }
    
    // Update totals
    function updateTotals() {
      const subtotal = calculateSubtotal();
      const tax = subtotal * 0.1; // 10% tax
      const discount = parseFloat(document.getElementById('discount-amount').value) || 0;
      const grandTotal = subtotal + tax - discount;
      
      document.getElementById('subtotal').textContent = '$' + subtotal.toFixed(2);
      document.getElementById('tax-amount').textContent = '$' + tax.toFixed(2);
      document.getElementById('grand-total').textContent = '$' + grandTotal.toFixed(2);
    }
  });
</script>