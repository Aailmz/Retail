<script>
  document.addEventListener('DOMContentLoaded', function() {
    let cart = [];
    let selectedPaymentMethod = 'cash';
    let selectedMemberId = null;
    let tempProductId = null;
    let tempQuantity = 1;
    let availablePromotions = [];
  
    // Load available promotions when page loads
    loadAvailablePromotions();


    function loadAvailablePromotions() {
      fetch('/promotions/active', {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('access_token')}`
        }
      })
        .then(response => response.json())
        .then(data => {
          availablePromotions = data; 
          console.log('Loaded promotions:', availablePromotions);
        })
        .catch(error => {
          console.error('Error loading promotions:', error);
        });
    }
    
    // Category filtering
    document.querySelectorAll('.category-btn').forEach(button => {
      button.addEventListener('click', function() {
        const category = this.getAttribute('data-category');
        
        // Remove active class from all category buttons
        document.querySelectorAll('.category-btn').forEach(btn => {
          btn.classList.remove('active');
        });
        
        // Add active class to clicked button
        this.classList.add('active');
        
        // Filter products
        const productItems = document.querySelectorAll('.product-item');
        productItems.forEach(item => {
          if (category === 'all' || item.getAttribute('data-category') === category) {
            item.style.display = '';
          } else {
            item.style.display = 'none';
          }
        });
      });
    });
    
    // Product search functionality
    document.getElementById('product-search').addEventListener('input', function() {
      const searchTerm = this.value.toLowerCase();
      const productItems = document.querySelectorAll('.product-item');
      
      productItems.forEach(item => {
        const productCard = item.querySelector('.product-card');
        const productName = productCard.getAttribute('data-name').toLowerCase();
        
        if (productName.includes(searchTerm)) {
          item.style.display = '';
        } else {
          item.style.display = 'none';
        }
      });
    });
    
    // Product selection
    document.querySelectorAll('.product-card').forEach(card => {
      card.addEventListener('click', function() {
        const productId = this.getAttribute('data-id');
        const productName = this.getAttribute('data-name');
        const productPrice = parseFloat(this.getAttribute('data-price'));
        const productStock = parseInt(this.getAttribute('data-stock'));
        
        // Store temp data for modal
        tempProductId = productId;
        
        // Show quantity modal with product info
        document.getElementById('quantity-product-name').textContent = productName;
        document.getElementById('quantity-stock').textContent = productStock;
        document.getElementById('quantity-input').value = 1;
        document.getElementById('quantity-input').max = productStock;
        
        // Show applicable promotions for this product
        populateApplicablePromotions(parseInt(productId));
        
        // Show the modal
        const quantityModal = new bootstrap.Modal(document.getElementById('quantityModal'));
        quantityModal.show();
      });
    });
    
    // Make sure productId is correctly compared with eligible_products
    function populateApplicablePromotions(productId) {
      const promotionsContainer = document.getElementById('applicable-promotions');
      promotionsContainer.innerHTML = '';

      // Show loading indicator
      promotionsContainer.innerHTML = '<div class="text-center py-2"><span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span><span class="ms-2">Loading promotions...</span></div>';

      // Debug outputs
      console.log('Populating promotions for product ID:', productId);
      console.log('Available promotions:', availablePromotions);

      // Short delay to ensure loading spinner is visible
      setTimeout(() => {
        // Clear loading state
        promotionsContainer.innerHTML = '';

        // Extract promotions array from the response object
        const promotionsArray = availablePromotions.data || [];
        
        // Check if we have any promotions
        if (!Array.isArray(promotionsArray) || promotionsArray.length === 0) {
          console.warn('No promotions available in data array');
          promotionsContainer.innerHTML = '<div class="text-muted text-center py-2">No applicable promotions found</div>';
          return;
        }

        // Filter applicable promotions for this product
        const applicable = promotionsArray.filter(promo => {
          // Check if eligible_products exists and includes this product ID
          return promo.rules && 
                promo.rules.buy_product_id === productId;
        });

        console.log('Applicable promotions found:', applicable.length);

        // Create radio button for no promotion option
        const noPromoDiv = document.createElement('div');
        noPromoDiv.className = 'form-check mb-2';
        noPromoDiv.innerHTML = `
          <input class="form-check-input" type="radio" name="productPromotion" id="promo-none" value="none" checked>
          <label class="form-check-label" for="promo-none">No promotion</label>
        `;
        promotionsContainer.appendChild(noPromoDiv);

        // Add each applicable promotion as a radio button
        if (applicable.length > 0) {
          applicable.forEach(promo => {
            const promoDiv = document.createElement('div');
            promoDiv.className = 'form-check mb-2';

            let promoDescription = 'Unknown promotion type';
            if (promo.type === 'discount_percentage') {
              // Use the actual discount rate from configuration if available
              const discountRate = promo.configuration?.discount_rate || 0;
              promoDescription = `${discountRate}% off`;
            } else if (promo.type === 'fixed_amount_discount') {
              const discountAmount = promo.configuration?.discount_amount || 0;
              promoDescription = `$${discountAmount} off`;
            } else if (promo.type === 'buy_x_get_y_free' || promo.type === 'buy_x_get_y') {
              const buyQty = promo.rules?.min_quantity || 1;
              const freeQty = promo.configuration?.free_quantity || 1;
              promoDescription = `Buy ${buyQty}, get ${freeQty} free`;
            }

            promoDiv.innerHTML = `
              <input class="form-check-input" type="radio" name="productPromotion" id="promo-${promo.id}" value="${promo.id}">
                <label class="form-check-label" for="promo-${promo.id}">
                <strong>${promo.name}</strong> - ${promoDescription}
                <div class="text-muted text-sm">${promo.description || ''}</div>
              </label>
            `;
            promotionsContainer.appendChild(promoDiv);
          });
        } else {
          // If no applicable promotions after filtering
          const noApplicableDiv = document.createElement('div');
          noApplicableDiv.className = 'text-muted text-sm mt-2';
          noApplicableDiv.textContent = 'No applicable promotions for this product';
          promotionsContainer.appendChild(noApplicableDiv);
        }
      }, 300); // Short delay for better UX
    }
    
    // Quantity controls
    document.getElementById('decrease-qty').addEventListener('click', function() {
      const input = document.getElementById('quantity-input');
      const currentValue = parseInt(input.value);
      if (currentValue > 1) {
        input.value = currentValue - 1;
      }
    });
    
    document.getElementById('increase-qty').addEventListener('click', function() {
      const input = document.getElementById('quantity-input');
      const currentValue = parseInt(input.value);
      const maxValue = parseInt(input.max);
      if (currentValue < maxValue) {
        input.value = currentValue + 1;
      }
    });
    
    // Confirm quantity
    document.getElementById('confirm-quantity').addEventListener('click', function() {
      const quantity = parseInt(document.getElementById('quantity-input').value);
      const productCard = document.querySelector(`.product-card[data-id="${tempProductId}"]`);
      
      if (productCard) {
        const productId = parseInt(productCard.getAttribute('data-id'));
        const productName = productCard.getAttribute('data-name');
        const productPrice = parseFloat(productCard.getAttribute('data-price'));
        const productStock = parseInt(productCard.getAttribute('data-stock'));
        
        // Get selected promotion
        let selectedPromotion = null;
        const selectedPromoRadio = document.querySelector('input[name="productPromotion"]:checked');

        if (selectedPromoRadio && selectedPromoRadio.value !== 'none') {
          const promoId = parseInt(selectedPromoRadio.value);

          const promotionsArray = availablePromotions.data || [];
          selectedPromotion = promotionsArray.find(p => p.id === promoId);
        }
        
        // Calculate discounted price if promotion applies
        let discountedPrice = productPrice;
        let discountAmount = 0;
        let promotionId = null;
        let promotionName = null;
        
        if (selectedPromotion) {
          promotionId = selectedPromotion.id;
          promotionName = selectedPromotion.name;
          
          if (selectedPromotion.type === 'discount_percentage') {
            // Use the actual discount rate from configuration
            const discountPercentage = selectedPromotion.configuration?.discount_rate || 0;
            discountAmount = (productPrice * discountPercentage / 100);
            discountedPrice = productPrice - discountAmount;
          } 
          else if (selectedPromotion.type === 'fixed_amount_discount') {
            discountAmount = selectedPromotion.configuration?.discount_amount || 0;
            discountedPrice = productPrice - discountAmount;
            if (discountedPrice < 0) discountedPrice = 0;
          }
          else if (selectedPromotion.type === 'buy_x_get_y_free' || selectedPromotion.type === 'buy_x_get_y') {
            // For buy X get Y free, we'll adjust quantity but keep the price the same
            // We'll handle this in the cart UI
          }
        }
      
      // Check if the product is already in cart
      const existingItemIndex = cart.findIndex(item => item.id === productId);
      
      if (existingItemIndex !== -1) {
        // Update quantity if already in cart
        const newQuantity = cart[existingItemIndex].quantity + quantity;
        
        if (newQuantity <= productStock) {
          cart[existingItemIndex].quantity = newQuantity;
          // Update promotion details too
          if (selectedPromotion) {
            cart[existingItemIndex].promotionId = promotionId;
            cart[existingItemIndex].promotionName = promotionName;
            cart[existingItemIndex].discountedPrice = discountedPrice;
            cart[existingItemIndex].discountAmount = discountAmount;
          } else {
            // If no promotion is selected, remove any existing promotion
            cart[existingItemIndex].promotionId = null;
            cart[existingItemIndex].promotionName = null;
            cart[existingItemIndex].discountedPrice = productPrice;
            cart[existingItemIndex].discountAmount = 0;
          }
        } else {
          alert(`Cannot add more than available stock (${productStock})`);
          return;
        }
      } else {
        // Add new item to cart
        cart.push({
          id: productId,
          name: productName,
          price: productPrice,
          quantity: quantity,
          maxStock: productStock,
          promotionId: promotionId,
          promotionName: promotionName,
          discountedPrice: discountedPrice,
          discountAmount: discountAmount
        });
      }
      
      // Update cart UI
      updateCartUI();
      
      // Close the modal
      bootstrap.Modal.getInstance(document.getElementById('quantityModal')).hide();
    }
  });
    
    // Clear cart
    document.getElementById('clear-cart').addEventListener('click', function() {
      if (confirm('Are you sure you want to clear the cart?')) {
        cart = [];
        updateCartUI();
      }
    });
    
    // Payment method selection
    document.querySelectorAll('.payment-method-btn').forEach(button => {
      button.addEventListener('click', function() {
        // Remove active class from all payment method buttons
        document.querySelectorAll('.payment-method-btn').forEach(btn => {
          btn.classList.remove('active');
        });
        
        // Add active class to clicked button
        this.classList.add('active');
        
        // Store selected payment method
        selectedPaymentMethod = this.getAttribute('data-method');
        
        // Show/hide payment reference field for non-cash methods
        const referenceContainer = document.getElementById('payment-reference-container');
        if (selectedPaymentMethod !== 'cash') {
          referenceContainer.style.display = 'block';
        } else {
          referenceContainer.style.display = 'none';
        }
      });
    });
    
    // Apply discount
    document.getElementById('apply-discount').addEventListener('click', function() {
      updateTotals();
    });
    
    // Complete transaction
    document.getElementById('complete-transaction').addEventListener('click', function() {
      if (cart.length === 0) {
        alert('Cannot complete transaction with empty cart.');
        return;
      }

      // Validasi stok
      for (const item of cart) {
        if (item.quantity > item.maxStock) {
          alert(`Stock for ${item.name} is insufficient. Available: ${item.maxStock}, Requested: ${item.quantity}`);
          return;
        }
      }

      // Gather transaction data
      const customerName = document.getElementById('customer-name').value;
      const customerPhone = document.getElementById('customer-phone').value;
      const note = document.getElementById('transaction-note').value;
      let paymentReference = null;

      if (selectedPaymentMethod !== 'cash') {
        paymentReference = document.getElementById('payment-reference').value;
        if (!paymentReference) {
          alert('Please enter payment reference for ' + selectedPaymentMethod);
          return;
        }
      }

      // Prepare transaction data according to CreateTransactionDto
      const transactionData = {
        userId: selectedMemberId || undefined,
        customerName: document.getElementById('customer-name').value || undefined,
        customerPhone: document.getElementById('customer-phone').value || undefined,
        items: cart.map(item => ({
          productId: item.id,
          quantity: item.quantity,
          // Include promotion information
          promotionId: item.promotionId || undefined,
          discountAmount: item.discountAmount || 0
        })),
        paymentMethod: selectedPaymentMethod,
        paymentReference: selectedPaymentMethod !== 'cash' ? 
                        document.getElementById('payment-reference').value : undefined,
        note: document.getElementById('transaction-note').value || undefined
      };

      console.log('Sending transaction data:', transactionData);

      // Send to server - try with the correct endpoint path
      fetch('/transactions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('access_token')}`
        },
        body: JSON.stringify(transactionData)
      })
      .then(response => {
        console.log('Response status:', response.status);
        
        // Clone the response for debugging
        const responseClone = response.clone();
        
        if (!response.ok) {
          if (response.status === 401) {
            alert('Unauthorized: Please log in again.');
            window.location.href = '/login';
            throw new Error('Unauthorized');
          } else {
            // Try to get JSON error first
            return response.json()
              .catch(() => {
                // If not JSON, get text
                return responseClone.text().then(text => {
                  console.error('Non-JSON response:', text.substring(0, 500));
                  throw new Error(`Server error: ${response.status}`);
                });
              })
              .then(errorData => {
                if (errorData && errorData.message) {
                  throw new Error(errorData.message);
                } else {
                  throw new Error('Unknown server error');
                }
              });
          }
        }
        return response.json();
      })
      .then(data => {
        alert('Transaction completed successfully!');
        // Reset cart and form
        cart = [];
        updateCartUI();
        document.getElementById('customer-name').value = '';
        document.getElementById('customer-phone').value = '';
        document.getElementById('transaction-note').value = '';
        document.getElementById('discount-amount').value = '';
        document.getElementById('selected-member').textContent = 'No member selected';
        selectedMemberId = null;
        // Redirect ke halaman detail transaksi
        window.location.href = `/transactions/${data.id}`;
      })
      .catch(error => {
        console.error('Error completing transaction:', error);
        alert('Error completing transaction: ' + error.message);
      });
    });
    
    // Search members
    document.getElementById('search-member-btn').addEventListener('click', function() {
      const searchValue = document.getElementById('member-search').value;
      
      if (!searchValue) {
        alert('Please enter search term');
        return;
      }
      
      // Fetch members from server
      fetch(`/api/members/search?q=${encodeURIComponent(searchValue)}`)
        .then(response => response.json())
        .then(data => {
          const resultsContainer = document.getElementById('member-search-results');
          resultsContainer.innerHTML = '';
          
          if (data.length === 0) {
            resultsContainer.innerHTML = '<div class="list-group-item">No members found</div>';
            return;
          }
          
          data.forEach(member => {
            const item = document.createElement('button');
            item.className = 'list-group-item list-group-item-action';
            item.innerHTML = `
              <div class="d-flex justify-content-between align-items-center">
                <div>
                  <h6 class="mb-0">${member.name}</h6>
                  <p class="text-sm text-muted mb-0">${member.email || ''}</p>
                </div>
                <div class="text-sm text-muted">${member.phone || ''}</div>
              </div>
            `;
            
            item.addEventListener('click', function() {
              selectedMemberId = member.id;
              document.getElementById('selected-member').textContent = member.name;
              document.getElementById('customer-name').value = member.name;
              document.getElementById('customer-phone').value = member.phone || '';
              
              bootstrap.Modal.getInstance(document.getElementById('memberModal')).hide();
            });
            
            resultsContainer.appendChild(item);
          });
        })
        .catch(error => {
          console.error('Error searching members:', error);
          alert('Error searching for members. Please try again.');
        });
    });
    
    // Update Cart UI
    function updateCartUI() {
    const cartContainer = document.getElementById('cart-items');
    
    if (cart.length === 0) {
      cartContainer.innerHTML = `
        <div class="text-center py-5 text-muted">
          <i class="fas fa-shopping-cart fa-3x mb-3"></i>
          <p>Cart is empty</p>
          <p class="text-sm">Add products by clicking on items from the left panel</p>
        </div>
      `;
    } else {
      let cartHTML = '';
      
      cart.forEach((item, index) => {
        // Calculate item total using discounted price if available
        const priceToUse = item.discountedPrice !== undefined ? item.discountedPrice : item.price;
        const itemTotal = priceToUse * item.quantity;
        
        const promotionBadge = item.promotionName 
          ? `<span class="badge bg-success text-white ms-2">${item.promotionName}</span>` 
          : '';
        
        const originalPriceDisplay = item.discountAmount > 0
          ? `<span class="text-sm text-muted text-decoration-line-through me-1">$${item.price.toFixed(2)}</span>`
          : '';
        
        cartHTML += `
          <div class="cart-item p-3 border-bottom">
            <div class="d-flex justify-content-between mb-2">
              <div>
                <h6 class="mb-0 d-flex align-items-center">
                  ${item.name}
                  ${promotionBadge}
                </h6>
                <div class="d-flex align-items-center">
                  ${originalPriceDisplay}
                  <span class="text-sm ${item.discountAmount > 0 ? 'text-success font-weight-bold' : 'text-muted'}">
                    $${priceToUse.toFixed(2)} × ${item.quantity}
                  </span>
                </div>
              </div>
              <div class="text-end">
                <span class="font-weight-bold">$${itemTotal.toFixed(2)}</span>
                <div class="d-flex gap-1 mt-1">
                  <button class="btn btn-sm btn-outline-success promotion-btn" data-index="${index}">
                    <i class="fas fa-tag"></i>
                  </button>
                  <button class="btn btn-sm btn-outline-primary edit-qty-btn" data-index="${index}">
                    <i class="fas fa-edit"></i>
                  </button>
                  <button class="btn btn-sm btn-outline-danger remove-item-btn" data-index="${index}">
                    <i class="fas fa-trash"></i>
                  </button>
                </div>
              </div>
            </div>
          </div>
        `;
      });
      
      cartContainer.innerHTML = cartHTML;
      
      // Add event listeners for cart actions
      document.querySelectorAll('.edit-qty-btn').forEach(button => {
        button.addEventListener('click', function() {
          const index = parseInt(this.getAttribute('data-index'));
          const item = cart[index];
          
          if (item) {
            tempProductId = item.id;
            document.getElementById('quantity-product-name').textContent = item.name;
            document.getElementById('quantity-stock').textContent = item.maxStock;
            document.getElementById('quantity-input').value = item.quantity;
            document.getElementById('quantity-input').max = item.maxStock;
            
            // Hide promotion section when editing quantity
            document.querySelector('.promotions-section').style.display = 'none';
            
            // When confirming quantity, update the item
            const originalConfirmHandler = document.getElementById('confirm-quantity').onclick;
            document.getElementById('confirm-quantity').onclick = function() {
              const newQuantity = parseInt(document.getElementById('quantity-input').value);
              cart[index].quantity = newQuantity;
              updateCartUI();
              bootstrap.Modal.getInstance(document.getElementById('quantityModal')).hide();
              document.getElementById('confirm-quantity').onclick = originalConfirmHandler;
              // Restore promotion section display
              document.querySelector('.promotions-section').style.display = 'block';
            };
            
            const quantityModal = new bootstrap.Modal(document.getElementById('quantityModal'));
            quantityModal.show();
          }
        });
      });
      
      document.querySelectorAll('.promotion-btn').forEach(button => {
        button.addEventListener('click', function() {
          const index = parseInt(this.getAttribute('data-index'));
          const item = cart[index];
          
          if (item) {
            // Show promotions modal for this product
            showProductPromotionsModal(item, index);
          }
        });
      });
      
      document.querySelectorAll('.remove-item-btn').forEach(button => {
        button.addEventListener('click', function() {
          const index = parseInt(this.getAttribute('data-index'));
          cart.splice(index, 1);
          updateCartUI();
        });
      });
    }
    
    updateTotals();
  }

  function showProductPromotionsModal(item, cartIndex) {
    const modal = document.getElementById('productPromotionModal') || createProductPromotionModal();
    const modalTitle = modal.querySelector('.modal-title');
    const promotionsContainer = modal.querySelector('#product-promotions-list');

    modalTitle.textContent = `Select Promotion for ${item.name}`;
    promotionsContainer.innerHTML = '';

    // Extract the promotions array from the response object
    const promotionsArray = availablePromotions.data || [];

    // Check if promotionsArray is an array
    if (!Array.isArray(promotionsArray)) {
      console.warn('availablePromotions.data is not an array:', availablePromotions);
      promotionsContainer.innerHTML = '<div class="list-group-item">No promotions available</div>';
      return;
    }

    // Filter applicable promotions for this product
    const applicable = promotionsArray.filter(promo => {
      // Check if this promotion applies to the current product
      if (promo?.rules?.buy_product_id === item.id) {
        // Additional checks can go here (like member-only promos)
        if (promo.rules.member_only && !selectedMemberId) {
          return false;
        }
        return true;
      }
      return false;
    });

    // Add "No Promotion" option
    const noPromoDiv = document.createElement('div');
    noPromoDiv.className = 'list-group-item';
    noPromoDiv.innerHTML = `
      <div class="form-check">
        <input class="form-check-input" type="radio" name="itemPromotion" 
              id="item-promo-none" value="none" ${!item.promotionId ? 'checked' : ''}>
        <label class="form-check-label w-100" for="item-promo-none">
          <strong>No Promotion</strong>
          <div class="text-muted small">Regular price: $${item.price.toFixed(2)}</div>
        </label>
      </div>
    `;
    promotionsContainer.appendChild(noPromoDiv);

    // Add each applicable promotion
    applicable.forEach(promo => {
      const promoDiv = document.createElement('div');
      promoDiv.className = 'list-group-item';

      let promoDescription = '';
      let discountedPrice = item.price;
      let discountAmount = 0;

      if (promo.type === 'discount_percentage') {
        const discountPercentage = promo.configuration.discount_rate;
        discountAmount = (item.price * discountPercentage / 100);
        discountedPrice = item.price - discountAmount;
        promoDescription = `${discountPercentage}% off`;
      } else if (promo.type === 'fixed_amount_discount') {
        discountAmount = promo.configuration.discount_amount;
        discountedPrice = item.price - discountAmount;
        if (discountedPrice < 0) discountedPrice = 0;
        promoDescription = `$${discountAmount.toFixed(2)} off`;
      } else if (promo.type === 'buy_x_get_y_free' || promo.type === 'buy_x_get_y') {
        promoDescription = `Buy ${promo.rules.min_quantity}, get ${promo.configuration?.free_quantity || 1} free`;
      }

      promoDiv.innerHTML = `
        <div class="form-check">
          <input class="form-check-input" type="radio" name="itemPromotion" 
                id="item-promo-${promo.id}" value="${promo.id}" 
                data-price="${discountedPrice.toFixed(2)}"
                data-discount="${discountAmount.toFixed(2)}"
                data-type="${promo.type}"
                data-name="${promo.name}"
                ${item.promotionId === promo.id ? 'checked' : ''}>
          <label class="form-check-label w-100" for="item-promo-${promo.id}">
            <strong>${promo.name}</strong> - ${promoDescription}
            <div class="text-muted small">${promo.description || ''}</div>
            <div class="text-success small">
              ${discountAmount > 0 ? `New price: $${discountedPrice.toFixed(2)} (Save $${discountAmount.toFixed(2)})` : ''}
            </div>
          </label>
        </div>
      `;
      promotionsContainer.appendChild(promoDiv);
    });

    // Apply button handler
    const applyButton = modal.querySelector('#apply-item-promotion');
    applyButton.onclick = function() {
      const selectedPromo = document.querySelector('input[name="itemPromotion"]:checked');

      if (selectedPromo.value === 'none') {
        // Remove promotion
        cart[cartIndex].promotionId = null;
        cart[cartIndex].promotionName = null;
        cart[cartIndex].discountedPrice = cart[cartIndex].price;
        cart[cartIndex].discountAmount = 0;
      } else {
        // Apply selected promotion
        const promoId = parseInt(selectedPromo.value);
        const discountedPrice = parseFloat(selectedPromo.getAttribute('data-price'));
        const discountAmount = parseFloat(selectedPromo.getAttribute('data-discount'));
        const promoName = selectedPromo.getAttribute('data-name');

        cart[cartIndex].promotionId = promoId;
        cart[cartIndex].promotionName = promoName;
        cart[cartIndex].discountedPrice = discountedPrice;
        cart[cartIndex].discountAmount = discountAmount;
      }

      // Update cart UI
      updateCartUI();

      // Close modal
      bootstrap.Modal.getInstance(modal).hide();
    };

    // Show the modal
    const modalInstance = new bootstrap.Modal(modal);
    modalInstance.show();
  }
  
  // Create product promotion modal if it doesn't exist
  function createProductPromotionModal() {
    const modalHtml = `
      <div class="modal fade" id="productPromotionModal" tabindex="-1">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title">Select Promotion</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <div class="list-group" id="product-promotions-list">
                <!-- Promotions will be loaded here -->
              </div>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
              <button type="button" class="btn btn-primary" id="apply-item-promotion">Apply</button>
            </div>
          </div>
        </div>
      </div>
    `;
    
    const modalContainer = document.createElement('div');
    modalContainer.innerHTML = modalHtml;
    document.body.appendChild(modalContainer.firstChild);
    
    return document.getElementById('productPromotionModal');
  }
    
    // Calculate subtotal
    function calculateSubtotal() {
      return cart.reduce((total, item) => total + (item.price * item.quantity), 0);
    }
    
    // Update totals
    function updateTotals() {
      const subtotal = calculateSubtotal();
      const tax = subtotal * 0.1; // 10% tax
      const discount = parseFloat(document.getElementById('discount-amount').value) || 0;
      const grandTotal = subtotal + tax - discount;
      
      document.getElementById('subtotal').textContent = '$' + subtotal.toFixed(2);
      document.getElementById('tax-amount').textContent = '$' + tax.toFixed(2);
      document.getElementById('grand-total').textContent = '$' + grandTotal.toFixed(2);
    }
  });
</script>