<script>
document.addEventListener('DOMContentLoaded', function() {
  let cart = [];
  let selectedPaymentMethod = 'cash';
  let selectedMemberId = null;
  let tempProductId = null;
  let tempQuantity = 1;
  let availablePromotions = [];

  // Load available promotions when page loads
  loadAvailablePromotions();

  function loadAvailablePromotions() {
    fetch('/promotions/active', {
      headers: {
        'Authorization': `Bearer ${localStorage.getItem('access_token')}`
      }
    })
      .then(response => response.json())
      .then(data => {
        availablePromotions = data;
        console.log('Loaded promotions:', availablePromotions);
      })
      .catch(error => {
        console.error('Error loading promotions:', error);
      });
  }

  // Category filtering
  document.querySelectorAll('.category-btn').forEach(button => {
    button.addEventListener('click', function() {
      const category = this.getAttribute('data-category');
      document.querySelectorAll('.category-btn').forEach(btn => {
        btn.classList.remove('active');
      });
      this.classList.add('active');
      const productItems = document.querySelectorAll('.product-item');
      productItems.forEach(item => {
        if (category === 'all' || item.getAttribute('data-category') === category) {
          item.style.display = '';
        } else {
          item.style.display = 'none';
        }
      });
    });
  });

  // Product search functionality
  document.getElementById('product-search').addEventListener('input', function() {
    const searchTerm = this.value.toLowerCase();
    const productItems = document.querySelectorAll('.product-item');
    productItems.forEach(item => {
      const productCard = item.querySelector('.product-card');
      const productName = productCard.getAttribute('data-name').toLowerCase();
      if (productName.includes(searchTerm)) {
        item.style.display = '';
      } else {
        item.style.display = 'none';
      }
    });
  });

  // Product selection
  document.querySelectorAll('.product-card').forEach(card => {
    card.addEventListener('click', function() {
      const productId = this.getAttribute('data-id');
      const productName = this.getAttribute('data-name');
      const productPrice = parseFloat(this.getAttribute('data-price'));
      const productStock = parseInt(this.getAttribute('data-stock'));
      tempProductId = productId;
      document.getElementById('quantity-product-name').textContent = productName;
      document.getElementById('quantity-stock').textContent = productStock;
      document.getElementById('quantity-input').value = 1;
      document.getElementById('quantity-input').max = productStock;
      populateApplicablePromotions(parseInt(productId));
      const quantityModal = new bootstrap.Modal(document.getElementById('quantityModal'));
      quantityModal.show();
    });
  });

  function populateApplicablePromotions(productId) {
    const promotionsContainer = document.getElementById('applicable-promotions');
    promotionsContainer.innerHTML = '<div class="text-center py-2"><span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span><span class="ms-2">Loading promotions...</span></div>';

    console.log('Populating promotions for product ID:', productId);
    console.log('Available promotions:', availablePromotions);

    setTimeout(() => {
      promotionsContainer.innerHTML = '';
      const promotionsArray = availablePromotions.data || [];
      if (!Array.isArray(promotionsArray) || promotionsArray.length === 0) {
        console.warn('No promotions available in data array');
        promotionsContainer.innerHTML = '<div class="text-muted text-center py-2">No applicable promotions found</div>';
        return;
      }

      const applicable = promotionsArray.filter(promo => {
        return promo.rules && promo.rules.buy_product_id === productId;
      });

      console.log('Applicable promotions found:', applicable.length);

      const noPromoDiv = document.createElement('div');
      noPromoDiv.className = 'form-check mb-2';
      noPromoDiv.innerHTML = `
        <input class="form-check-input" type="radio" name="productPromotion" id="promo-none" value="none" checked>
        <label class="form-check-label" for="promo-none">No promotion</label>
      `;
      promotionsContainer.appendChild(noPromoDiv);

      if (applicable.length > 0) {
        applicable.forEach(promo => {
          const promoDiv = document.createElement('div');
          promoDiv.className = 'form-check mb-2';

          let promoDescription = 'Unknown promotion type';
          if (promo.type === 'discount_percentage') {
            const discountRate = promo.configuration?.discount_rate || 0;
            promoDescription = `${discountRate}% off`;
          } else if (promo.type === 'fixed_amount_discount') {
            const discountAmount = promo.configuration?.discount_amount || 0;
            promoDescription = `$${discountAmount} off`;
          } else if (promo.type === 'buy_x_get_y_free' || promo.type === 'buy_x_get_y') {
            const buyQty = promo.buy_count || 1;
            const freeQty = promo.get_count || 1;
            promoDescription = `Buy ${buyQty}, get ${freeQty} free`;
          }

          promoDiv.innerHTML = `
            <input class="form-check-input" type="radio" name="productPromotion" id="promo-${promo.id}" value="${promo.id}">
            <label class="form-check-label" for="promo-${promo.id}">
              <strong>${promo.name}</strong> - ${promoDescription}
              <div class="text-muted text-sm">${promo.description || ''}</div>
            </label>
          `;
          promotionsContainer.appendChild(promoDiv);
        });
      } else {
        const noApplicableDiv = document.createElement('div');
        noApplicableDiv.className = 'text-muted text-sm mt-2';
        noApplicableDiv.textContent = 'No applicable promotions for this product';
        promotionsContainer.appendChild(noApplicableDiv);
      }
    }, 300);
  }

  // Quantity controls
  document.getElementById('decrease-qty').addEventListener('click', function() {
    const input = document.getElementById('quantity-input');
    const currentValue = parseInt(input.value);
    if (currentValue > 1) {
      input.value = currentValue - 1;
    }
  });

  document.getElementById('increase-qty').addEventListener('click', function() {
    const input = document.getElementById('quantity-input');
    const currentValue = parseInt(input.value);
    const maxValue = parseInt(input.max);
    if (currentValue < maxValue) {
      input.value = currentValue + 1;
    }
  });

  // Confirm quantity
  document.getElementById('confirm-quantity').addEventListener('click', function() {
    const quantity = parseInt(document.getElementById('quantity-input').value);
    const productCard = document.querySelector(`.product-card[data-id="${tempProductId}"]`);

    if (productCard) {
      const productId = parseInt(productCard.getAttribute('data-id'));
      const productName = productCard.getAttribute('data-name');
      const productPrice = parseFloat(productCard.getAttribute('data-price'));
      const productStock = parseInt(productCard.getAttribute('data-stock'));

      let selectedPromotion = null;
      const selectedPromoRadio = document.querySelector('input[name="productPromotion"]:checked');

      if (selectedPromoRadio && selectedPromoRadio.value !== 'none') {
        const promoId = parseInt(selectedPromoRadio.value);
        const promotionsArray = availablePromotions.data || [];
        selectedPromotion = promotionsArray.find(p => p.id === promoId);
      }

      let originalPrice = productPrice;
      let markedUpPrice = originalPrice;
      let discountedPrice = originalPrice;
      let discountAmount = 0;
      let promotionId = null;
      let promotionName = null;
      let markupPercentage = 0;

      if (selectedPromotion) {
        promotionId = selectedPromotion.id;
        promotionName = selectedPromotion.name;
        markupPercentage = selectedPromotion.configuration?.applied_markup_value || 0;
        markedUpPrice = originalPrice * (1 + markupPercentage / 100);

        if (selectedPromotion.type === 'discount_percentage') {
          const discountPercentage = selectedPromotion.configuration?.discount_rate || 0;
          discountAmount = (markedUpPrice * discountPercentage / 100);
          discountedPrice = markedUpPrice - discountAmount;
        } else if (selectedPromotion.type === 'fixed_amount_discount') {
          discountAmount = selectedPromotion.configuration?.discount_amount || 0;
          discountedPrice = markedUpPrice - discountAmount;
          if (discountedPrice < 0) discountedPrice = 0;
        } else if (selectedPromotion.type === 'buy_x_get_y_free' || selectedPromotion.type === 'buy_x_get_y') {
          discountedPrice = markedUpPrice; // Paid product price remains marked up
        }
      } else {
        discountedPrice = markedUpPrice;
      }

      const existingItemIndex = cart.findIndex(item => item.id === productId && item.promotionId === promotionId);

      if (existingItemIndex !== -1) {
        const newQuantity = cart[existingItemIndex].quantity + quantity;
        if (newQuantity <= productStock) {
          cart[existingItemIndex].quantity = newQuantity;
          if (selectedPromotion) {
            cart[existingItemIndex].promotionId = promotionId;
            cart[existingItemIndex].promotionName = promotionName;
            cart[existingItemIndex].originalPrice = originalPrice;
            cart[existingItemIndex].markedUpPrice = markedUpPrice;
            cart[existingItemIndex].markupPercentage = markupPercentage;
            cart[existingItemIndex].discountedPrice = discountedPrice;
            cart[existingItemIndex].discountAmount = discountAmount;
          } else {
            cart[existingItemIndex].promotionId = null;
            cart[existingItemIndex].promotionName = null;
            cart[existingItemIndex].originalPrice = originalPrice;
            cart[existingItemIndex].markedUpPrice = markedUpPrice;
            cart[existingItemIndex].markupPercentage = markupPercentage;
            cart[existingItemIndex].discountedPrice = markedUpPrice;
            cart[existingItemIndex].discountAmount = 0;
          }
        } else {
          alert(`Cannot add more than available stock (${productStock})`);
          return;
        }
      } else {
        cart.push({
          id: productId,
          name: productName,
          price: originalPrice,
          originalPrice: originalPrice,
          markedUpPrice: markedUpPrice,
          markupPercentage: markupPercentage,
          quantity: quantity,
          maxStock: productStock,
          promotionId: promotionId,
          promotionName: promotionName,
          discountedPrice: discountedPrice,
          discountAmount: discountAmount,
          isFree: false
        });
      }

      // Handle Buy X Get Y promotion
      if (selectedPromotion && (selectedPromotion.type === 'buy_x_get_y_free' || selectedPromotion.type === 'buy_x_get_y')) {
        const buyCount = selectedPromotion.configuration?.buy_count || 1;
        const getCount = selectedPromotion.configuration?.get_count || 1;
        const freeProductId = selectedPromotion.configuration?.free_product_id;
        const freeProductPrice = selectedPromotion.configuration?.free_product_price || 0;

        // Fetch free product details
        const freeProductCard = document.querySelector(`.product-card[data-id="${freeProductId}"]`);
        if (freeProductCard) {
          const freeProductName = freeProductCard.getAttribute('data-name');
          const freeProductStock = parseInt(freeProductCard.getAttribute('data-stock'));

          // Calculate how many free items to add based on quantity and buy_count
          const freeQuantity = Math.floor(quantity / buyCount) * getCount;

          if (freeQuantity > 0 && freeQuantity <= freeProductStock) {
            const existingFreeItemIndex = cart.findIndex(item => item.id === freeProductId && item.isFree && item.promotionId === promotionId);

            if (existingFreeItemIndex !== -1) {
              cart[existingFreeItemIndex].quantity = freeQuantity;
            } else {
              cart.push({
                id: freeProductId,
                name: `${freeProductName} (Free)`,
                price: freeProductPrice,
                originalPrice: freeProductPrice,
                markedUpPrice: 0,
                markupPercentage: 0,
                quantity: freeQuantity,
                maxStock: freeProductStock,
                promotionId: promotionId,
                promotionName: promotionName,
                discountedPrice: 0,
                discountAmount: freeProductPrice,
                isFree: true
              });
            }
          } else if (freeQuantity > freeProductStock) {
            alert(`Cannot add free product: insufficient stock for ${freeProductName} (Available: ${freeProductStock})`);
            return;
          }
        } else {
          alert('Free product not found in product list.');
          return;
        }
      }

      updateCartUI();
      bootstrap.Modal.getInstance(document.getElementById('quantityModal')).hide();
    }
  });

  // Clear cart
  document.getElementById('clear-cart').addEventListener('click', function() {
    if (confirm('Are you sure you want to clear the cart?')) {
      cart = [];
      updateCartUI();
    }
  });

  // Payment method selection
  document.querySelectorAll('.payment-method-btn').forEach(button => {
    button.addEventListener('click', function() {
      document.querySelectorAll('.payment-method-btn').forEach(btn => {
        btn.classList.remove('active');
      });
      this.classList.add('active');
      selectedPaymentMethod = this.getAttribute('data-method');
      const referenceContainer = document.getElementById('payment-reference-container');
      if (selectedPaymentMethod !== 'cash') {
        referenceContainer.style.display = 'block';
      } else {
        referenceContainer.style.display = 'none';
      }
    });
  });

  // Apply discount
  document.getElementById('apply-discount').addEventListener('click', function() {
    updateTotals();
  });

  // Complete transaction
  document.getElementById('complete-transaction').addEventListener('click', function() {
    if (cart.length === 0) {
      alert('Cannot complete transaction with empty cart.');
      return;
    }

    for (const item of cart) {
      if (item.quantity > item.maxStock) {
        alert(`Stock for ${item.name} is insufficient. Available: ${item.maxStock}, Requested: ${item.quantity}`);
        return;
      }
    }

    const customerName = document.getElementById('customer-name').value;
    const customerPhone = document.getElementById('customer-phone').value;
    const note = document.getElementById('transaction-note').value;
    let paymentReference = null;

    if (selectedPaymentMethod !== 'cash') {
      paymentReference = document.getElementById('payment-reference').value;
      if (!paymentReference) {
        alert('Please enter payment reference for ' + selectedPaymentMethod);
        return;
      }
    }

    const transactionData = {
      userId: selectedMemberId || undefined,
      customerName: document.getElementById('customer-name').value || undefined,
      customerPhone: document.getElementById('customer-phone').value || undefined,
      items: cart.map(item => ({
        productId: item.id,
        quantity: item.quantity,
        promotionId: item.promotionId || undefined,
        discountAmount: item.discountAmount || 0,
        originalPrice: item.originalPrice,
        markedUpPrice: item.markedUpPrice,
        discountedPrice: item.discountedPrice,
        markupPercentage: item.markupPercentage || 0,
        unitPrice: item.discountedPrice !== undefined ? item.discountedPrice : item.markedUpPrice
      })),
      subtotal: calculateSubtotal(),
      paymentMethod: selectedPaymentMethod,
      paymentReference: selectedPaymentMethod !== 'cash' ? document.getElementById('payment-reference').value : undefined,
      note: document.getElementById('transaction-note').value || undefined,
      discountAmount: parseFloat(document.getElementById('discount-amount').value) || 0,
      taxAmount: calculateSubtotal() * 0.1,
      grandTotal: calculateSubtotal() + (calculateSubtotal() * 0.1) - (parseFloat(document.getElementById('discount-amount').value) || 0)
    };

    console.log('Sending transaction data:', transactionData);

    fetch('/transactions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${localStorage.getItem('access_token')}`
      },
      body: JSON.stringify(transactionData)
    })
      .then(response => {
        console.log('Response status:', response.status);
        const contentType = response.headers.get('content-type');
        if (!response.ok) {
          if (response.status === 401) {
            alert('Unauthorized: Please log in again.');
            window.location.href = '/login';
            throw new Error('Unauthorized');
          } else {
            if (contentType && contentType.includes('application/json')) {
              return response.json().then(errorData => {
                throw new Error(errorData.message || 'Unknown server error');
              });
            } else {
              return response.text().then(text => {
                console.error('Non-JSON response:', text.substring(0, 500));
                throw new Error(`Server error: ${response.status}`);
              });
            }
          }
        }
        if (contentType && contentType.includes('application/json')) {
          return response.json();
        } else if (response.status === 204) {
          return { success: true };
        } else {
          return response.text().then(text => {
            try {
              return JSON.parse(text);
            } catch (e) {
              console.log('Response is not JSON:', text.substring(0, 500));
              return { success: true };
            }
          });
        }
      })
      .then(data => {
        alert('Transaction completed successfully!');
        cart = [];
        updateCartUI();
        document.getElementById('customer-name').value = '';
        document.getElementById('customer-phone').value = '';
        document.getElementById('transaction-note').value = '';
        document.getElementById('discount-amount').value = '';
        document.getElementById('selected-member').textContent = 'No member selected';
        selectedMemberId = null;
        window.location.href = `/pos`;
      })
      .catch(error => {
        console.error('Error completing transaction:', error);
        alert('Error completing transaction: ' + error.message);
      });
  });

  // Search members
  document.getElementById('search-member-btn').addEventListener('click', function() {
    const searchValue = document.getElementById('member-search').value;
    if (!searchValue) {
      alert('Please enter search term');
      return;
    }
    fetch(`/api/members/search?q=${encodeURIComponent(searchValue)}`)
      .then(response => response.json())
      .then(data => {
        const resultsContainer = document.getElementById('member-search-results');
        resultsContainer.innerHTML = '';
        if (data.length === 0) {
          resultsContainer.innerHTML = '<div class="list-group-item">No members found</div>';
          return;
        }
        data.forEach(member => {
          const item = document.createElement('button');
          item.className = 'list-group-item list-group-item-action';
          item.innerHTML = `
            <div class="d-flex justify-content-between align-items-center">
              <div>
                <h6 class="mb-0">${member.name}</h6>
                <p class="text-sm text-muted mb-0">${member.email || ''}</p>
              </div>
              <div class="text-sm text-muted">${member.phone || ''}</div>
            </div>
          `;
          item.addEventListener('click', function() {
            selectedMemberId = member.id;
            document.getElementById('selected-member').textContent = member.name;
            document.getElementById('customer-name').value = member.name;
            document.getElementById('customer-phone').value = member.phone || '';
            bootstrap.Modal.getInstance(document.getElementById('memberModal')).hide();
          });
          resultsContainer.appendChild(item);
        });
      })
      .catch(error => {
        console.error('Error searching members:', error);
        alert('Error searching for members. Please try again.');
      });
  });

  // Update Cart UI
  function updateCartUI() {
    const cartContainer = document.getElementById('cart-items');
    if (cart.length === 0) {
      cartContainer.innerHTML = `
        <div class="text-center py-5 text-muted">
          <i class="fas fa-shopping-cart fa-3x mb-3"></i>
          <p>Cart is empty</p>
          <p class="text-sm">Add products by clicking on items from the left panel</p>
        </div>
      `;
    } else {
      let cartHTML = '';
      cart.forEach((item, index) => {
        const priceToUse = item.discountedPrice !== undefined ? item.discountedPrice : item.markedUpPrice;
        const itemTotal = priceToUse * item.quantity;
        const promotionBadge = item.promotionName
          ? `<span class="badge bg-success text-white ms-2">${item.promotionName}</span>`
          : '';
        const originalPriceDisplay = (item.markupPercentage > 0 || item.discountAmount > 0)
          ? `<span class="text-sm text-muted text-decoration-line-through me-1">$${item.originalPrice.toFixed(2)}</span>`
          : '';
        const markedUpPriceDisplay = (item.markupPercentage > 0 && item.discountAmount > 0)
          ? `<span class="text-sm text-muted text-decoration-line-through me-1">$${item.markedUpPrice.toFixed(2)}</span>`
          : '';

        cartHTML += `
          <div class="cart-item p-3 border-bottom">
            <div class="d-flex justify-content-between mb-2">
              <div>
                <h6 class="mb-0 d-flex align-items-center">
                  ${item.name}
                  ${promotionBadge}
                </h6>
                <div class="d-flex align-items-center">
                  ${originalPriceDisplay}
                  ${markedUpPriceDisplay}
                  <span class="text-sm ${item.discountAmount > 0 ? 'text-success font-weight-bold' : 'text-muted'}">
                    $${priceToUse.toFixed(2)} × ${item.quantity}
                  </span>
                </div>
              </div>
              <div class="text-end">
                <span class="font-weight-bold">$${itemTotal.toFixed(2)}</span>
                <div class="d-flex gap-1 mt-1">
                  <button class="btn btn-sm btn-outline-success promotion-btn" data-index="${index}">
                    <i class="fas fa-tag"></i>
                  </button>
                  <button class="btn btn-sm btn-outline-primary edit-qty-btn" data-index="${index}">
                    <i class="fas fa-edit"></i>
                  </button>
                  <button class="btn btn-sm btn-outline-danger remove-item-btn" data-index="${index}">
                    <i class="fas fa-trash"></i>
                  </button>
                </div>
              </div>
            </div>
          </div>
        `;
      });

      cartContainer.innerHTML = cartHTML;

      document.querySelectorAll('.edit-qty-btn').forEach(button => {
        button.addEventListener('click', function() {
          const index = parseInt(this.getAttribute('data-index'));
          const item = cart[index];
          if (item) {
            tempProductId = item.id;
            document.getElementById('quantity-product-name').textContent = item.name;
            document.getElementById('quantity-stock').textContent = item.maxStock;
            document.getElementById('quantity-input').value = item.quantity;
            document.getElementById('quantity-input').max = item.maxStock;
            document.querySelector('.promotions-section').style.display = 'none';
            const originalConfirmHandler = document.getElementById('confirm-quantity').onclick;
            document.getElementById('confirm-quantity').onclick = function() {
              const newQuantity = parseInt(document.getElementById('quantity-input').value);
              cart[index].quantity = newQuantity;
              // Update free product quantity if associated with Buy X Get Y
              if (item.promotionId) {
                const promotion = (availablePromotions.data || []).find(p => p.id === item.promotionId);
                if (promotion && (promotion.type === 'buy_x_get_y_free' || promotion.type === 'buy_x_get_y')) {
                  const buyCount = promotion.buy_count || 1;
                  const getCount = promotion.get_count || 1;
                  const freeQuantity = Math.floor(newQuantity / buyCount) * getCount;
                  const freeItemIndex = cart.findIndex(f => f.id === promotion.free_product_id && f.isFree && f.promotionId === item.promotionId);
                  if (freeItemIndex !== -1) {
                    if (freeQuantity > 0) {
                      cart[freeItemIndex].quantity = freeQuantity;
                    } else {
                      cart.splice(freeItemIndex, 1);
                    }
                  }
                }
              }
              updateCartUI();
              bootstrap.Modal.getInstance(document.getElementById('quantityModal')).hide();
              document.getElementById('confirm-quantity').onclick = originalConfirmHandler;
              document.querySelector('.promotions-section').style.display = 'block';
            };
            const quantityModal = new bootstrap.Modal(document.getElementById('quantityModal'));
            quantityModal.show();
          }
        });
      });

      document.querySelectorAll('.promotion-btn').forEach(button => {
        button.addEventListener('click', function() {
          const index = parseInt(this.getAttribute('data-index'));
          const item = cart[index];
          if (item) {
            showProductPromotionsModal(item, index);
          }
        });
      });

      document.querySelectorAll('.remove-item-btn').forEach(button => {
        button.addEventListener('click', function() {
          const index = parseInt(this.getAttribute('data-index'));
          const item = cart[index];
          if (item.promotionId) {
            const promotion = (availablePromotions.data || []).find(p => p.id === item.promotionId);
            if (promotion && (promotion.type === 'buy_x_get_y_free' || promotion.type === 'buy_x_get_y')) {
              const freeItemIndex = cart.findIndex(f => f.id === promotion.free_product_id && f.isFree && f.promotionId === item.promotionId);
              if (freeItemIndex !== -1) {
                cart.splice(freeItemIndex, 1);
              }
            }
          }
          cart.splice(index, 1);
          updateCartUI();
        });
      });
    }
    updateTotals();
  }

  function showProductPromotionsModal(item, cartIndex) {
    const modal = document.getElementById('productPromotionModal') || createProductPromotionModal();
    const modalTitle = modal.querySelector('.modal-title');
    const promotionsContainer = modal.querySelector('#product-promotions-list');

    modalTitle.textContent = `Select Promotion for ${item.name}`;
    promotionsContainer.innerHTML = '';

    const promotionsArray = availablePromotions.data || [];
    if (!Array.isArray(promotionsArray)) {
      console.warn('availablePromotions.data is not an array:', availablePromotions);
      promotionsContainer.innerHTML = '<div class="list-group-item">No promotions available</div>';
      return;
    }

    const applicable = promotionsArray.filter(promo => {
      if (promo?.rules?.buy_product_id === item.id) {
        if (promo.rules.member_only && !selectedMemberId) {
          return false;
        }
        return true;
      }
      return false;
    });

    const noPromoDiv = document.createElement('div');
    noPromoDiv.className = 'list-group-item';
    noPromoDiv.innerHTML = `
      <div class="form-check">
        <input class="form-check-input" type="radio" name="itemPromotion" 
              id="item-promo-none" value="none" ${!item.promotionId ? 'checked' : ''}>
        <label class="form-check-label w-100" for="item-promo-none">
          <strong>No Promotion</strong>
          <div class="text-muted small">Original price: $${item.originalPrice.toFixed(2)}</div>
          ${item.markupPercentage > 0 ? `<div class="text-muted small">Marked-up price: $${item.markedUpPrice.toFixed(2)} (${item.markupPercentage}% markup)</div>` : ''}
        </label>
      </div>
    `;
    promotionsContainer.appendChild(noPromoDiv);

    applicable.forEach(promo => {
      const promoDiv = document.createElement('div');
      promoDiv.className = 'list-group-item';

      let promoDescription = '';
      let markupPercentage = promo.applied_markup_value || 0;
      let markedUpPrice = item.originalPrice * (1 + markupPercentage / 100);
      let discountedPrice = markedUpPrice;
      let discountAmount = 0;

      if (promo.type === 'discount_percentage') {
        const discountPercentage = promo.configuration.discount_rate;
        discountAmount = (markedUpPrice * discountPercentage / 100);
        discountedPrice = markedUpPrice - discountAmount;
        promoDescription = `${discountPercentage}% off`;
      } else if (promo.type === 'fixed_amount_discount') {
        discountAmount = promo.configuration.discount_amount;
        discountedPrice = markedUpPrice - discountAmount;
        if (discountedPrice < 0) discountedPrice = 0;
        promoDescription = `$${discountAmount.toFixed(2)} off`;
      } else if (promo.type === 'buy_x_get_y_free' || promo.type === 'buy_x_get_y') {
        const buyCount = promo.buy_count || 1;
        const getCount = promo.get_count || 1;
        const freeProductCard = document.querySelector(`.product-card[data-id="${promo.free_product_id}"]`);
        const freeProductName = freeProductCard ? freeProductCard.getAttribute('data-name') : 'Unknown Product';
        promoDescription = `Buy ${buyCount} ${item.name}, get ${getCount} ${freeProductName} free`;
        discountAmount = promo.free_product_price * getCount;
        discountedPrice = markedUpPrice; // Paid product price remains marked up
      }

      promoDiv.innerHTML = `
        <div class="form-check">
          <input class="form-check-input" type="radio" name="itemPromotion" 
                id="item-promo-${promo.id}" value="${promo.id}" 
                data-price="${discountedPrice.toFixed(2)}"
                data-marked-up="${markedUpPrice.toFixed(2)}"
                data-markup="${markupPercentage}"
                data-discount="${discountAmount.toFixed(2)}"
                data-type="${promo.type}"
                data-name="${promo.name}"
                ${item.promotionId === promo.id ? 'checked' : ''}>
          <label class="form-check-label w-100" for="item-promo-${promo.id}">
            <strong>${promo.name}</strong> - ${promoDescription}
            <div class="text-muted small">${promo.description || ''}</div>
            <div class="text-muted small">Original price: $${item.originalPrice.toFixed(2)}</div>
            <div class="text-muted small">With markup: $${markedUpPrice.toFixed(2)} (${markupPercentage}% markup)</div>
            <div class="text-success small">
              ${discountAmount > 0 ? `Savings: $${discountAmount.toFixed(2)}` : ''}
            </div>
          </label>
        </div>
      `;
      promotionsContainer.appendChild(promoDiv);
    });

    const applyButton = modal.querySelector('#apply-item-promotion');
    applyButton.onclick = function() {
      const selectedPromo = document.querySelector('input[name="itemPromotion"]:checked');
      const prevPromotion = (availablePromotions.data || []).find(p => p.id === cart[cartIndex].promotionId);

      // Remove previous free item if it exists
      if (prevPromotion && (prevPromotion.type === 'buy_x_get_y_free' || prevPromotion.type === 'buy_x_get_y')) {
        const freeItemIndex = cart.findIndex(f => f.id === prevPromotion.free_product_id && f.isFree && f.promotionId === prevPromotion.id);
        if (freeItemIndex !== -1) {
          cart.splice(freeItemIndex, 1);
        }
      }

      if (selectedPromo.value === 'none') {
        cart[cartIndex].promotionId = null;
        cart[cartIndex].promotionName = null;
        cart[cartIndex].discountedPrice = cart[cartIndex].markedUpPrice;
        cart[cartIndex].discountAmount = 0;
      } else {
        const promoId = parseInt(selectedPromo.value);
        const discountedPrice = parseFloat(selectedPromo.getAttribute('data-price'));
        const markedUpPrice = parseFloat(selectedPromo.getAttribute('data-marked-up'));
        const markupPercentage = parseFloat(selectedPromo.getAttribute('data-markup'));
        const discountAmount = parseFloat(selectedPromo.getAttribute('data-discount'));
        const promoName = selectedPromo.getAttribute('data-name');
        const promoType = selectedPromo.getAttribute('data-type');

        cart[cartIndex].promotionId = promoId;
        cart[cartIndex].promotionName = promoName;
        cart[cartIndex].markedUpPrice = markedUpPrice;
        cart[cartIndex].markupPercentage = markupPercentage;
        cart[cartIndex].discountedPrice = discountedPrice;
        cart[cartIndex].discountAmount = discountAmount;

        // Add free product for Buy X Get Y
        if (promoType === 'buy_x_get_y_free' || promoType === 'buy_x_get_y') {
          const promotion = (availablePromotions.data || []).find(p => p.id === promoId);
          if (promotion) {
            const buyCount = promotion.buy_count || 1;
            const getCount = promotion.get_count || 1;
            const freeProductId = promotion.free_product_id;
            const freeProductPrice = promotion.free_product_price || 0;
            const freeProductCard = document.querySelector(`.product-card[data-id="${freeProductId}"]`);
            if (freeProductCard) {
              const freeProductName = freeProductCard.getAttribute('data-name');
              const freeProductStock = parseInt(freeProductCard.getAttribute('data-stock'));
              const freeQuantity = Math.floor(cart[cartIndex].quantity / buyCount) * getCount;

              if (freeQuantity > 0 && freeQuantity <= freeProductStock) {
                const existingFreeItemIndex = cart.findIndex(item => item.id === freeProductId && item.isFree && item.promotionId === promoId);
                if (existingFreeItemIndex !== -1) {
                  cart[existingFreeItemIndex].quantity = freeQuantity;
                } else {
                  cart.push({
                    id: freeProductId,
                    name: `${freeProductName} (Free)`,
                    price: freeProductPrice,
                    originalPrice: freeProductPrice,
                    markedUpPrice: 0,
                    markupPercentage: 0,
                    quantity: freeQuantity,
                    maxStock: freeProductStock,
                    promotionId: promoId,
                    promotionName: promoName,
                    discountedPrice: 0,
                    discountAmount: freeProductPrice,
                    isFree: true
                  });
                }
              } else if (freeQuantity > freeProductStock) {
                alert(`Cannot add free product: insufficient stock for ${freeProductName} (Available: ${freeProductStock})`);
                return;
              }
            } else {
              alert('Free product not found in product list.');
              return;
            }
          }
        }
      }

      updateCartUI();
      bootstrap.Modal.getInstance(modal).hide();
    };

    const modalInstance = new bootstrap.Modal(modal);
    modalInstance.show();
  }

  function createProductPromotionModal() {
    const modalHtml = `
      <div class="modal fade" id="productPromotionModal" tabindex="-1">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title">Select Promotion</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <div class="list-group" id="product-promotions-list">
              </div>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
              <button type="button" class="btn btn-primary" id="apply-item-promotion">Apply</button>
            </div>
          </div>
        </div>
      </div>
    `;
    const modalContainer = document.createElement('div');
    modalContainer.innerHTML = modalHtml;
    document.body.appendChild(modalContainer.firstChild);
    return document.getElementById('productPromotionModal');
  }

  function calculateSubtotal() {
    return cart.reduce((total, item) => {
      const priceToUse = item.discountedPrice !== undefined ? item.discountedPrice : item.markedUpPrice;
      return total + (priceToUse * item.quantity);
    }, 0);
  }

  function updateTotals() {
    const subtotal = calculateSubtotal();
    const tax = subtotal * 0.1;
    const discount = parseFloat(document.getElementById('discount-amount').value) || 0;
    const grandTotal = subtotal + tax - discount;
    document.getElementById('subtotal').textContent = '$' + subtotal.toFixed(2);
    document.getElementById('tax-amount').textContent = '$' + tax.toFixed(2);
    document.getElementById('grand-total').textContent = '$' + grandTotal.toFixed(2);
  }
});
</script>