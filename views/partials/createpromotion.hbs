<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize Select2 for multiple and single selects
    $('.select2-single').select2({
      placeholder: "Select a product",
      allowClear: true
    });
    
    // Show/hide configuration fields based on promotion type
    const typeSelect = document.getElementById('type');
    const promotionConfigDivs = document.querySelectorAll('.promotion-config');
    
    // Buy and Free Product Select Elements
    const buyProductSelect = document.getElementById('buyProductSelect');
    const freeProductSelect = document.getElementById('freeProductSelect');
    
    typeSelect.addEventListener('change', function() {
      // Hide all config sections first
      promotionConfigDivs.forEach(div => {
        div.style.display = 'none';
      });
      
      // Show the relevant section based on type
      const selectedType = this.value;
      if (selectedType) {
        const configDiv = document.getElementById(selectedType + '_fields');
        if (configDiv) {
          configDiv.style.display = 'block';
        }
      }
    });
    
    // Function to add markup selection radio buttons to both promotion types
    function addMarkupSelectionUI() {
      // For Buy X Get Y
      const buyXMarkupArea = document.querySelector('#buy_x_get_y_fields .row:nth-of-type(3)');
      const buyXMarkupSelection = document.createElement('div');
      buyXMarkupSelection.className = 'col-md-8';
      buyXMarkupSelection.innerHTML = `
        <div class="form-group mb-3">
          <label class="form-label">Markup Type</label>
          <div class="form-check">
            <input class="form-check-input" type="radio" name="markupTypeBuyX" id="recommendedMarkupBuyX" value="recommended" checked>
            <label class="form-check-label" for="recommendedMarkupBuyX">
              Use recommended markup (with safety margin)
            </label>
          </div>
          <div class="form-check">
            <input class="form-check-input" type="radio" name="markupTypeBuyX" id="minimumMarkupBuyX" value="minimum">
            <label class="form-check-label" for="minimumMarkupBuyX">
              Use minimum markup (break-even)
            </label>
          </div>
        </div>
      `;
      buyXMarkupArea.appendChild(buyXMarkupSelection);
      
      // For Discount Percentage
      const discountMarkupArea = document.querySelector('#discount_percentage_fields .row:nth-of-type(3)');
      const discountMarkupSelection = document.createElement('div');
      discountMarkupSelection.className = 'col-md-6';
      discountMarkupSelection.innerHTML = `
        <div class="form-group mb-3">
          <label class="form-label">Markup Type</label>
          <div class="form-check">
            <input class="form-check-input" type="radio" name="markupTypeDiscount" id="recommendedMarkupTypeDiscount" value="recommended" checked>
            <label class="form-check-label" for="recommendedMarkupTypeDiscount">
              Use recommended markup (with safety margin)
            </label>
          </div>
          <div class="form-check">
            <input class="form-check-input" type="radio" name="markupTypeDiscount" id="minimumMarkupTypeDiscount" value="minimum">
            <label class="form-check-label" for="minimumMarkupTypeDiscount">
              Use minimum markup (break-even)
            </label>
          </div>
        </div>
      `;
      discountMarkupArea.appendChild(discountMarkupSelection);
      
      // Add event listeners for radio buttons
      document.querySelectorAll('input[name="markupTypeBuyX"]').forEach(radio => {
        radio.addEventListener('change', updateMarkupRecommendation);
      });
      
      document.querySelectorAll('input[name="markupTypeDiscount"]').forEach(radio => {
        radio.addEventListener('change', updateDiscountMarkupRecommendation);
      });
    }
    
    // Add markup selection UI
    addMarkupSelectionUI();
    
    function recommendMarkup(buyCount, getCount, paidProductPrice, freeProductPrice, customMarkup = null, useMinimumMarkup = false) {
      // Total produk dalam promosi
      const totalCount = buyCount + getCount;
      
      // Biaya total produk
      const totalCost = (buyCount * paidProductPrice) + (getCount * freeProductPrice);
      
      // Biaya produk berbayar
      const paidCost = buyCount * paidProductPrice;
      
      // Perhitungan markup minimum untuk menutupi biaya
      const minimumMarkup = ((totalCost / paidCost) - 1) * 100;
      
      // Rekomendasi markup dengan tambahan margin keamanan atau menggunakan custom markup
      let recommendedMarkup;
      
      if (useMinimumMarkup) {
        recommendedMarkup = minimumMarkup;
      } else if (customMarkup !== null) {
        recommendedMarkup = parseFloat(customMarkup);
      } else {
        recommendedMarkup = Math.ceil(minimumMarkup + 20);
      }
      
      // Calculate final price with the markup
      const finalPrice = paidProductPrice * (1 + (recommendedMarkup / 100));
      
      // Store normal price before discount (this is the marked up price)
      const normalPriceWithMarkup = finalPrice;
      
      return {
        minimumMarkup: minimumMarkup.toFixed(2),
        recommendedMarkup: recommendedMarkup,
        totalCost,
        paidCost,
        breakEvenPrice: (totalCost / buyCount).toFixed(2),
        finalPrice: finalPrice.toFixed(2),
        useMinimumMarkup: useMinimumMarkup,
        normalPriceWithMarkup: normalPriceWithMarkup.toFixed(2) // New field for normal price with markup
      };
    }

    function recommendDiscountMarkup(originalPrice, discountRate, maxDiscountAmount, quantity = 1, customMarkup = null, useMinimumMarkup = false) {
      // Calculate discount amount
      const discountAmount = originalPrice * (discountRate / 100);
      const effectiveDiscountAmount = maxDiscountAmount 
        ? Math.min(discountAmount, maxDiscountAmount) 
        : discountAmount;
      
      // Calculate selling price after discount
      const discountedPrice = originalPrice - effectiveDiscountAmount;
      
      // Total cost based on quantity
      const totalOriginalCost = originalPrice * quantity;
      const totalDiscountedCost = discountedPrice * quantity;
      
      // Calculate minimum markup to cover costs
      const minimumMarkup = ((totalOriginalCost / totalDiscountedCost) - 1) * 100;
      
      // Recommended markup with safety margin or use custom markup
      let recommendedMarkup;
      
      if (useMinimumMarkup) {
        recommendedMarkup = minimumMarkup;
      } else if (customMarkup !== null) {
        recommendedMarkup = parseFloat(customMarkup);
      } else {
        recommendedMarkup = Math.ceil(minimumMarkup + 20);
      }
      
      // Calculate price after minimum markup
      const priceWithMinMarkup = discountedPrice * (1 + (minimumMarkup / 100));
      
      // Calculate price after recommended/custom markup
      const priceWithRecommendedMarkup = discountedPrice * (1 + (recommendedMarkup / 100));
      
      // Calculate normal price with markup (before discount is applied)
      const normalPriceWithMinMarkup = originalPrice * (1 + (minimumMarkup / 100));
      const normalPriceWithRecommendedMarkup = originalPrice * (1 + (recommendedMarkup / 100));
      
      return {
        originalPrice,
        discountRate,
        quantity,
        discountAmount: effectiveDiscountAmount,
        discountedPrice,
        totalOriginalCost: totalOriginalCost.toFixed(2),
        totalDiscountedCost: totalDiscountedCost.toFixed(2),
        minimumMarkup: minimumMarkup.toFixed(2),
        recommendedMarkup,
        breakEvenPrice: discountedPrice.toFixed(2),
        priceWithMinMarkup: priceWithMinMarkup.toFixed(2),
        priceWithRecommendedMarkup: priceWithRecommendedMarkup.toFixed(2),
        useMinimumMarkup: useMinimumMarkup,
        normalPriceWithMinMarkup: normalPriceWithMinMarkup.toFixed(2), // New field for normal price with min markup
        normalPriceWithRecommendedMarkup: normalPriceWithRecommendedMarkup.toFixed(2) // New field for normal price with recommended markup
      };
    }

    // Contoh penggunaan di event listener
    function updateMarkupRecommendation() {
      const buyProduct = buyProductSelect.options[buyProductSelect.selectedIndex];
      const freeProduct = freeProductSelect.options[freeProductSelect.selectedIndex];
      const markupRecommendation = document.getElementById('markupRecommendation');
      
      if (!buyProduct || !freeProduct || buyProduct.value === '' || freeProduct.value === '') {
        markupRecommendation.innerHTML = '<p class="text-muted">Pilih produk beli dan gratis untuk melihat rekomendasi markup</p>';
        return;
      }
      
      const buyCount = parseInt(document.getElementById('buyCount').value);
      const getCount = parseInt(document.getElementById('getCount').value);
      const customMarkup = document.getElementById('customMarkupBuyX').value;
      const useMinimumMarkup = document.getElementById('minimumMarkupBuyX').checked;
      
      const buyProductPrice = parseFloat(buyProduct.getAttribute('data-selling-price'));
      const freeProductPrice = parseFloat(freeProduct.getAttribute('data-selling-price'));
      
      const markupCalculation = recommendMarkup(
        buyCount, 
        getCount, 
        buyProductPrice, 
        freeProductPrice,
        customMarkup !== "" ? customMarkup : null,
        useMinimumMarkup
      );
      
      // Format rekomendasi
      markupRecommendation.innerHTML = `
        <div class="row">
          <div class="col-md-6">
            <strong>Produk Berbayar:</strong> ${buyProduct.textContent}<br>
            <strong>Harga:</strong> Rp${buyProductPrice.toFixed(2)}
          </div>
          <div class="col-md-6">
            <strong>Produk Gratis:</strong> ${freeProduct.textContent}<br>
            <strong>Harga:</strong> Rp${freeProductPrice.toFixed(2)}
          </div>
        </div>
        <hr>
        <div class="row">
          <div class="col-md-6">
            <strong>Total Biaya:</strong> Rp${markupCalculation.totalCost.toFixed(2)}<br>
            <strong>Biaya Produk Berbayar:</strong> Rp${markupCalculation.paidCost.toFixed(2)}
          </div>
          <div class="col-md-6">
            <strong>Markup Minimum:</strong> ${markupCalculation.minimumMarkup}%<br>
            <strong>Markup Yang Digunakan:</strong> ${markupCalculation.recommendedMarkup.toFixed(2)}%
            <small class="d-block text-info">${useMinimumMarkup ? '(Markup Minimum)' : '(Markup Rekomendasi)'}</small>
          </div>
        </div>
        <div class="row mt-2">
          <div class="col-12">
            <div class="alert alert-info">
              <strong>Harga Impas:</strong> Rp${markupCalculation.breakEvenPrice}
              <small class="d-block">Harga minimal untuk menutupi biaya produk</small>
            </div>
          </div>
        </div>
        <div class="row mt-2">
          <div class="col-12">
            <div class="alert alert-success">
              <strong>Harga Jual Dengan Markup ${markupCalculation.recommendedMarkup.toFixed(2)}%:</strong> Rp${markupCalculation.finalPrice}
              <strong class="d-block mt-2">Harga Normal (Dengan Markup):</strong> Rp${markupCalculation.normalPriceWithMarkup}
            </div>
          </div>
        </div>
      `;
    }

    function updateDiscountMarkupRecommendation() {
      const discountProduct = document.getElementById('discountProductSelect');
      const selectedProduct = discountProduct.options[discountProduct.selectedIndex];
      const discountMarkupRecommendation = document.getElementById('discountMarkupRecommendation');
      
      if (!selectedProduct || selectedProduct.value === '') {
        discountMarkupRecommendation.innerHTML = '<p class="text-muted">Select a product to see markup details</p>';
        return;
      }
      
      const originalPrice = parseFloat(selectedProduct.getAttribute('data-selling-price'));
      const discountRate = parseFloat(document.getElementById('discountRate').value);
      const maxDiscountAmount = parseFloat(document.getElementById('maxDiscountAmount').value) || null;
      const quantity = parseInt(document.getElementById('minQuantity').value) || 1;
      const customMarkup = document.getElementById('customMarkupDiscount').value;
      const useMinimumMarkup = document.getElementById('minimumMarkupTypeDiscount').checked;
      
      const markupCalculation = recommendDiscountMarkup(
        originalPrice, 
        discountRate, 
        maxDiscountAmount,
        quantity,
        customMarkup !== "" ? customMarkup : null,
        useMinimumMarkup
      );
      
      // Format recommendation with quantity details and markup prices, including normal prices
      discountMarkupRecommendation.innerHTML = `
        <div class="row">
          <div class="col-md-6">
            <strong>Product:</strong> ${selectedProduct.textContent}<br>
            <strong>Original Price:</strong> Rp${originalPrice.toFixed(2)}<br>
            <strong>Minimum Quantity:</strong> ${quantity}
          </div>
          <div class="col-md-6">
            <strong>Discount Rate:</strong> ${discountRate}%<br>
            <strong>Discount Per Item:</strong> Rp${markupCalculation.discountAmount.toFixed(2)}<br>
            <strong>Discounted Price:</strong> Rp${markupCalculation.discountedPrice.toFixed(2)}
          </div>
        </div>
        <hr>
        <div class="row">
          <div class="col-md-6">
            <strong>Total Original Cost:</strong> Rp${markupCalculation.totalOriginalCost}<br>
            <strong>Total Discounted Cost:</strong> Rp${markupCalculation.totalDiscountedCost}
          </div>
          <div class="col-md-6">
            <strong>Minimum Markup:</strong> ${markupCalculation.minimumMarkup}%<br>
            <strong>Applied Markup:</strong> ${markupCalculation.recommendedMarkup.toFixed(2)}%
            <small class="d-block text-info">${useMinimumMarkup ? '(Minimum Markup)' : '(Recommended Markup)'}</small>
          </div>
        </div>
        <div class="row mt-2">
          <div class="col-12">
            <div class="alert alert-info">
              <strong>Break-even Price:</strong> Rp${markupCalculation.breakEvenPrice}
              <small class="d-block">Minimum price per item to cover costs</small>
            </div>
          </div>
        </div>
        <div class="row mt-2">
          <div class="col-12">
            <div class="alert alert-success">
              <strong>Pricing Details:</strong>
              <div class="row mt-2">
                <div class="col-md-6">
                  <strong>With Minimum Markup (${markupCalculation.minimumMarkup}%):</strong><br>
                  <span class="d-block">Normal Price (Before Discount): Rp${markupCalculation.normalPriceWithMinMarkup}</span>
                  <span class="d-block">Discounted Price: Rp${markupCalculation.priceWithMinMarkup}</span>
                </div>
                <div class="col-md-6">
                  <strong>With Applied Markup (${markupCalculation.recommendedMarkup.toFixed(2)}%):</strong><br>
                  <span class="d-block">Normal Price (Before Discount): Rp${markupCalculation.normalPriceWithRecommendedMarkup}</span>
                  <span class="d-block">Discounted Price: Rp${markupCalculation.priceWithRecommendedMarkup}</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      `;
    }

    const discountProductSelect = document.getElementById('discountProductSelect');
    const discountRateInput = document.getElementById('discountRate');
    const maxDiscountAmountInput = document.getElementById('maxDiscountAmount');
    const minQuantityInput = document.getElementById('minQuantity');
    
    discountProductSelect.addEventListener('change', updateDiscountMarkupRecommendation);
    discountRateInput.addEventListener('input', updateDiscountMarkupRecommendation);
    maxDiscountAmountInput.addEventListener('input', updateDiscountMarkupRecommendation);
    minQuantityInput.addEventListener('input', updateDiscountMarkupRecommendation);
    
    // Event listeners for custom markup inputs
    document.getElementById('customMarkupDiscount').addEventListener('input', updateDiscountMarkupRecommendation);
    document.getElementById('customMarkupBuyX').addEventListener('input', updateMarkupRecommendation);
    
    // Event listeners for dynamic updates
    buyProductSelect.addEventListener('change', updateMarkupRecommendation);
    freeProductSelect.addEventListener('change', updateMarkupRecommendation);
    document.getElementById('buyCount').addEventListener('input', updateMarkupRecommendation);
    document.getElementById('getCount').addEventListener('input', updateMarkupRecommendation);
    document.getElementById('discountPercent').addEventListener('input', updateMarkupRecommendation);
    
    // Form submission - convert form data to JSON
    const form = document.getElementById('promotionForm');
    form.addEventListener('submit', function(e) {
      e.preventDefault();
      
      // Prepare rules object
      const promotionType = document.getElementById('type').value;
      let rules = {};
      
      if (promotionType === 'buy_x_get_y') {
        const buyProduct = buyProductSelect.options[buyProductSelect.selectedIndex];
        const buyCount = parseInt(document.getElementById('buyCount').value);
        
        rules = {
          buy_product_id: parseInt(buyProduct.value),
          min_quantity: buyCount  // Added this line to store buy_count as min_quantity
        };
      }
      
      // Prepare configuration object based on promotion type
      let configuration = {};
      
      if (promotionType === 'buy_x_get_y') {
        const buyProduct = buyProductSelect.options[buyProductSelect.selectedIndex];
        const freeProduct = freeProductSelect.options[freeProductSelect.selectedIndex];
        
        const buyCount = parseInt(document.getElementById('buyCount').value);
        const getCount = parseInt(document.getElementById('getCount').value);
        const customMarkup = document.getElementById('customMarkupBuyX').value;
        const useMinimumMarkup = document.getElementById('minimumMarkupBuyX').checked;
        
        const buyProductPrice = parseFloat(buyProduct.getAttribute('data-selling-price'));
        const freeProductPrice = parseFloat(freeProduct.getAttribute('data-selling-price'));
        
        const markupCalculation = recommendMarkup(
          buyCount, 
          getCount, 
          buyProductPrice, 
          freeProductPrice,
          customMarkup !== "" ? customMarkup : null,
          useMinimumMarkup
        );
        
        configuration = {
          buy_product_id: parseInt(buyProduct.value),
          free_product_id: parseInt(freeProduct.value),
          buy_count: buyCount,
          get_count: getCount,
          paid_product_price: buyProductPrice,
          free_product_price: freeProductPrice,
          markup_calculation: markupCalculation,
          custom_markup: customMarkup !== "" ? parseFloat(customMarkup) : null,
          selected_markup: useMinimumMarkup ? "minimum" : "recommended",
          applied_markup_value: markupCalculation.recommendedMarkup,
          is_minimum_markup: useMinimumMarkup,
          normal_price_with_markup: markupCalculation.normalPriceWithMarkup // Store the normal price with markup
        };
      }

      if (promotionType === 'discount_percentage') {
        const discountProduct = document.getElementById('discountProductSelect');
        const selectedProduct = discountProduct.options[discountProduct.selectedIndex];
        
        const originalPrice = parseFloat(selectedProduct.getAttribute('data-selling-price'));
        const discountRate = parseFloat(document.getElementById('discountRate').value);
        const maxDiscountAmount = parseFloat(document.getElementById('maxDiscountAmount').value) || null;
        const minQuantity = parseInt(document.getElementById('minQuantity').value) || 1;
        const customMarkup = document.getElementById('customMarkupDiscount').value;
        const useMinimumMarkup = document.getElementById('minimumMarkupTypeDiscount').checked;
        
        // Rules now include both product ID and minimum quantity
        rules = {
          buy_product_id: parseInt(selectedProduct.value),
          min_quantity: minQuantity
        };
        
        const markupCalculation = recommendDiscountMarkup(
          originalPrice, 
          discountRate, 
          maxDiscountAmount,
          minQuantity,
          customMarkup !== "" ? customMarkup : null,
          useMinimumMarkup
        );
        
        // Make sure the entire markupCalculation object is stored, including markup prices and normal prices
        configuration = {
          product_id: parseInt(selectedProduct.value),
          discount_rate: discountRate,
          max_discount_amount: maxDiscountAmount,
          min_quantity: minQuantity,
          original_price: originalPrice,
          markup_calculation: markupCalculation,
          custom_markup: customMarkup !== "" ? parseFloat(customMarkup) : null,
          selected_markup: useMinimumMarkup ? "minimum" : "recommended",
          applied_markup_value: markupCalculation.recommendedMarkup,
          is_minimum_markup: useMinimumMarkup,
          price_with_min_markup: markupCalculation.priceWithMinMarkup,
          price_with_recommended_markup: markupCalculation.priceWithRecommendedMarkup,
          normal_price_with_min_markup: markupCalculation.normalPriceWithMinMarkup, // Store normal price with min markup
          normal_price_with_recommended_markup: markupCalculation.normalPriceWithRecommendedMarkup // Store normal price with recommended markup
        };
      }
      
      if (promotionType === 'bundle') {
        const bundlePrice = parseFloat(document.getElementById('bundlePrice').value);
        const minItems = parseInt(document.getElementById('minItems').value);
        
        configuration = {
          bundle_price: bundlePrice,
          min_items: minItems
        };
      }
      
      // Set the hidden JSON fields
      document.getElementById('rulesJson').value = JSON.stringify(rules);
      document.getElementById('configurationJson').value = JSON.stringify(configuration);
      
      // Submit the form
      this.submit();
    });
  });
</script>